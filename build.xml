<project name="funz-calculator" default="help" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<property name="funz-root.dir" value="${basedir}/.." />
	<property name="funz.properties" location="../funz-profile/funz.properties" />

	<!-- funz dependent properties -->
	<property file="${funz.properties}" />

	<!-- verify that the ${funz.properties} file has been set -->
	<fail message="Set the funz properties file ${funz.properties} from funz-profile">
		<condition>
			<not>
				<and>
					<available file="${funz.properties}" type="file" />
				</and>
			</not>
		</condition>
	</fail>

	<!-- funz calculator dependent properties -->
	<property file="funz-calculator.properties" />

	<property name="Calculator.tmpl" location="${src.dir}/org/funz/calculator/Calculator.tmpl" />
	<property name="Calculator.java" location="${src.dir}/org/funz/calculator/Calculator.java" />

	<!-- Clean targets -->
	<!-- ************* -->
	<target name="clean-build">
		<delete dir="${build.dir}" failonerror="false" />
		<delete dir="${coverage.dir}" failonerror="false" />
	</target>

	<target name="clean-dist">
		<delete dir="${dist.dir}" failonerror="false" />
	</target>

	<target name="clean-doc">
		<delete dir="${doc.dir}" failonerror="false" />
	</target>

	<target name="clean" depends="clean-build, clean-dist, clean-doc" description="clean almost everything that can be generated by ant targets" />



	<!-- Compile targets -->
	<!-- *************** -->

	<condition property="noMonitor">
		<equals arg1="$${monitor}" arg2="${monitor}" />
	</condition>
	<condition property="hasMonitor">
		<not>
			<equals arg1="$${monitor}" arg2="${monitor}" />
		</not>
	</condition>

	<target name="generateCalculatorNoMonitor" if="noMonitor">
		<echo message="No monitor" />
		<copy file="${Calculator.tmpl}" tofile="${Calculator.java}" overwrite="true" />
		<replace file="${Calculator.java}" token="__MONITOR__" value='""' />
	</target>

	<target name="generateCalculatorWithMonitor" if="hasMonitor">
		<echo message="Monitor: ${monitor}" />
		<copy file="${Calculator.tmpl}" tofile="${Calculator.java}" overwrite="true" />
		<replace file="${Calculator.java}" token="__MONITOR__" value="${monitor}" />
	</target>

	<target name="generateCalculator" depends="generateCalculatorNoMonitor, generateCalculatorWithMonitor" />

	<target name="compileOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compileOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compile" depends="compileOnWindows, compileOnUnix" description="compile the source " />


	<!-- Distribution targets -->
	<!-- ******************** -->
	<target name="distOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
		<!-- Copy core libs -->
		<exec dir="${funz-core.dir}" executable="sh">
			<arg line="-c 'mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="distOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
		<!-- Copy core libs -->
		<exec dir="${funz-core.dir}" executable="cmd">
			<arg line="/c mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="dist" depends="compile, distOnUnix, distOnWindows" description="generate the distribution">
		<copy toFile="${dist.lib.dir}/${calculator.jar}">
			<fileset dir="${build.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<copy todir="${dist.dir}" overwrite="true">
			<fileset file="${config.dir}/${calculator.xml}" />
		</copy>

		<copy todir="${dist.dir}" overwrite="true">
			<fileset file="${scripts.dir}/Funz*" />
		</copy>
		<chmod perm="a+x">
			<fileset dir="${dist.dir}">
				<include name="Funz*.*" />
			</fileset>
		</chmod>

		<mkdir dir="${dist.scripts.dir}" />
		<copy todir="${dist.scripts.dir}" overwrite="true">
			<fileset dir="${scripts.dir}">
				<include name="*" />
				<exclude name="*Funz*" />
			</fileset>
		</copy>
		<chmod perm="a+x">
			<fileset dir="${dist.scripts.dir}">
				<include name="*.sh" />
				<include name="*.bat" />
			</fileset>
		</chmod>

		<!-- Extract native libraries from sigar.jar -->
		<unzip src="${dist.lib.dir}/sigar-${sigar.version}.jar" dest="${dist.lib.dir}">
			<patternset>
				<include name="*.so" />
				<include name="*.dylib" />
				<include name="*.dll" />
			</patternset>
		</unzip>
	</target>


	<!-- Run calculator targets -->
	<!-- ********************** -->
	<path id="lib.classpath">
		<fileset dir="${dist.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="run-calculator" depends="dist" description="run the application">
		<java dir="${dist.lib.dir}" classname="org.funz.calculator.Calculator" fork="true" failonerror="true">
			<!--jar="${dist.lib.dir}/${calculator.jar}"-->
			<classpath refid="lib.classpath" />
			<arg value="file:${dist.dir}/${calculator.xml}" />
		</java>
	</target>


	<!-- Documentation targets -->
	<!-- ********************* -->
	<target name="docOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="docOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="doc" depends="docOnUnix, docOnWindows" description="generate the code documentation" />


	<!-- help -->
	<target name="help" description="display the help on standard output">
		<echo message="********************************" />
		<echo message="        Funz calculator" />
		<echo message="********************************" />
		<echo />
		<echo message="help			  :	display this help" />
		<echo message="clean          :	clean everything that can be generated by ant targets" />
		<echo message="dist		  	  :	generate a distribution" />
		<echo message="run-calculator :	run the application" />
		<echo message="doc			  :	generate the code documentation" />
	</target>


</project>
